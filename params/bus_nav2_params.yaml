amcl:
  ros__parameters:
    use_sim_time: False
    alpha1: 0.005 #0.2
    alpha2: 0.005 #0.2
    alpha3: 0.005 #0.2
    alpha4: 0.005 #0.2
    alpha5: 0.005 #0.2
    base_frame_id: base_link
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: map
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: likelihood_field
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: differential
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: /lidar/localisation_merged/scan
    
    set_initial_pose: false # false
    initial_pose:
      x: -222.50
      y: 42.36
      z: 0.0
      yaw: 0.0035
    
amcl_map_client:
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "Tomscombined.yaml" #"ezoneguild.yaml" #"reidchild.yaml" # ezoneguild.yaml #"reidchild.yaml" #"result5.yaml" # ! gets overwritten by launch file


bt_navigator:
  ros__parameters:
    transform_tolerance: 1.0
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odometry/gps  # ! previously /odometry/filtered
    bt_loop_duration: 10
    default_server_timeout: 2000
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: false
    controller_frequency: 5.0
    min_x_velocity_threshold: 0.0001
    min_y_velocity_threshold: 0.0001
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 2.0
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 60.0
    
    # Goal checker parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 2.5
      yaw_goal_tolerance: 1.5708
    
    FollowPath:
      ### Pure pursuit parameters
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 3.0
      use_approach_linear_velocity_scaling: false

      lookahead_dist: 4.0
      use_velocity_scaled_lookahead_dist: false # Whether to use the velocity scaled lookahead distances or constant lookahead_distance.
      min_lookahead_dist: 3.0 # The minimum lookahead distance (m) threshold when use_velocity_scaled_lookahead_dist is true.
      max_lookahead_dist: 6.0 # The maximum lookahead distance (m) threshold when use_velocity_scaled_lookahead_dist is true.
      lookahead_time: 0.5 # The time (s) to project the velocity by when use_velocity_scaled_lookahead_dist is true
      # with these current params we would project velocity forward 500m?

      rotate_to_heading_angular_vel: 20.0 # If use_rotate_to_heading is true, this is the angular velocity to use.
      transform_tolerance: 2.0


      min_approach_linear_velocity: 0.5 # The minimum velocity (m/s) threshold to apply when approaching the goal to ensure progress. Must be > 0.01.
      # max_allowed_time_to_collision_up_to_carrot: 5.0 - THIS IS FOR ROS2 HUMBLE!
      max_allowed_time_to_collision: 1.5 # The time to project a velocity command forward to check for collisions.

      use_regulated_linear_velocity_scaling: true # whether to scale speed on high curvature paths (slower on high curvature)
      use_cost_regulated_linear_velocity_scaling: true # Whether to use the regulated features for proximity to obstacles (e.g. slow in close proximity to obstacles).
      cost_scaling_dist: 6.0
      cost_scaling_gain: 0.8
      inflation_cost_scaling_factor: 4.0
      regulated_linear_scaling_min_radius: 5.0 # the radius threshold for when speed scaling is triggered on turns
      regulated_linear_scaling_min_speed: 0.15 # The minimum speed (m/s) for which any of the regulated heuristics can send, to ensure process is still achievable even in high cost spaces with high curvature. Must be > 0.1.

      #Can't have both rotate to heading and allow reversing
      use_rotate_to_heading: false # this can only be true on robots which rotate in place
      allow_reversing: true
      # max_robot_pose_search_dist: 30.0 - Leave this as default (max(local_costmap)/2)
      use_interpolation: true
      goal_dist_tol: 2.0
      
 
controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

planner_server:
  ros__parameters:
    expected_planner_frequency: 5.00
    use_sim_time: False
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 1.5
      use_astar: False
      allow_unknown: False
      # plugin: "smac_planner/SmacPlanner2D"
      # tolerance: 1.5
      # downsample_costmap: False
      # downsampling_factor: 1
      # allow_unknown: True
      # max_iterations: 1000000
      # max_on_approach_iterations: 1000
      # max_planning_time: 2.0
      # motion_model_for_search: "MOORE"
      # cost_travel_multiplier: 2.0
      # use_final_approach_orientation: False
      # smoother:
      #   max_iterations: 1000
      #   w_smooth: 0.3
      #   w_data: 0.2
      #   tolerance: 1e-10
      # plugin: "smac_planner/SmacPlanner"
      # tolerance: 0.5                      # tolerance for planning if unable to reach exact pose, in meters, for 2D node
      # downsample_costmap: false           # whether or not to downsample the map
      # downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      # allow_unknown: False                # allow traveling in unknown space
      # max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      # max_on_approach_iterations: 1000    # maximum number of iterations to attempt to reach goal once in tolerance, 2D only
      # max_planning_time: 3.5              # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      # motion_model_for_search: "DUBIN"    # 2D Moore, Von Neumann; Hybrid Dubin, Redds-Shepp; State Lattice set internally
      # cost_travel_multiplier: 2.0         # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      # angle_quantization_bins: 1         # For Hybrid nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
      # analytic_expansion_ratio: 3.5       # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
      # analytic_expansion_max_length: 25.0    # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius
      # minimum_turning_radius: 5.5        # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
      # reverse_penalty: 2.1                # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      # change_penalty: 1.0                 # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
      # non_straight_penalty: 1.20          # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
      # cost_penalty: 2.0                   # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      # retrospective_penalty: 0.6        # For Hybrid/Lattice nodes: penalty to prefer later maneuvers before earlier along the path. Saves search time since earlier nodes are not expanded until it is necessary. Must be >= 0.0 and <= 1.0
      # rotation_penalty: 5.0               # For Lattice node: Penalty to apply only to pure rotate in place commands when using minimum control sets containing rotate in place primitives. This should always be set sufficiently high to weight against this action unless strictly necessary for obstacle avoidance or there may be frequent discontinuities in the plan where it requests the robot to rotate in place to short-cut an otherwise smooth path for marginal path distance savings.
      # lookup_table_size: 20               # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
      # cache_obstacle_heuristic: False      # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.  
      # allow_reverse_expansion: False      # For Lattice nodes: Whether to expand state lattice graph in forward primitives or reverse as well, will double the branching factor at each step.   
      # smooth_path: False                   # For Lattice/Hybrid nodes: Whether or not to smooth the path, always true for 2D nodes.
      # smoother:
      #   max_iterations: 1000
      #   w_smooth: 0.3
      #   w_data: 0.2
      #   tolerance: 1e-10
      #   do_refinement: false               # Whether to recursively run the smoother 3 times on the results from prior runs to refine the results further

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 5.0
    recovery_plugins: ["backup", "wait"]
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: map
    robot_base_frame: base_link
    transform_timeout: 3.0
    use_sim_time: False
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

waypoint_follower:
  ros__parameters:
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 0

      
global_costmap:
  global_costmap:
    ros__parameters:
      footprint: "[[-2.0, -1.0], [-2.0, 1.0], [2.0, 1.0], [2.0, -1.0]]" # "[[-0.85, -0.4], [-0.85, 0.4], [0.85, 0.4], [0.85, -0.4]]"
      footprint_padding: 0.2
      update_frequency: 2.0
      publish_frequency: 2.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      resolution: 0.2
      transform_tolerance: 3.0
      plugins: ["static_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        enabled: True
        # subscribe_to_updates: True
        # transform_tolerance: 3.0 # tolerance in time
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: True
        inflation_radius: 3.0
        cost_scaling_factor: 1.1
        inflate_unknown: True
        inflate_around_unknown: True
      always_send_full_costmap: True


local_costmap:
  local_costmap:
    ros__parameters:
      track_unknown_space: True # If False, treats unknown space as free space, else as unknown space.
      update_frequency: 20.0
      publish_frequency: 20.0
      global_frame: map #map # odom
      robot_base_frame: base_link
      use_sim_time: False #False
      static_map: False
      rolling_window: True
      width: 30
      height: 30
      resolution: 0.2
      transform_tolerance: 1.5
      footprint: "[[-2.3, -1.3], [-2.3, 1.3], [2.3, 1.3], [2.3, -1.3]]" # 30cm buffer around bus for clearing obstacles
      footprint_padding: 0.10
      # plugins: ["obstacle_layer", "inflation_layer"]
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        footprint_clearing_enabled: True # Clear any occupied cells under robot footprint.
        observation_sources: local_objects_scan
        local_objects_scan:
            # Topic from point-cloud to laser scan node from merged cloud
            topic: /lidar/localisation_merged/scan
            max_obstacle_height: 3.0
            inf_is_valid: True # Are infinite returns from laser scanners valid measurements to raycast.
            clearing: True
            marking: True
            obstacle_range: 20.0
            raytrace_range: 25.0
            data_type: "LaserScan"
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: true
        enabled: true
        subscribe_to_updates: true
        transform_tolerance: 3.0 # tolerance in time
      inflation_layer:
        enabled: True
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.5 # Exponential decay factor across inflation radius.
        inflation_radius: 4.0 # Radius to inflate costmap around lethal obstacles.
        inflate_unknown: True
        inflate_around_unknown: True
      always_send_full_costmap: True
